// Jenkinfile ƒë√£ ch·∫°y ·ªïn ·ªü b∆∞·ªõc t·ª± ƒë·ªông deploy ·ªü staging vps 

pipeline {
    agent {
        docker {
            image 'docker:dind'
            args '-v /var/run/docker.sock:/var/run/docker.sock --privileged'
        }
    }

    environment {
        GITHUB_CREDENTIALS = 'github-jenkins'
        DOCKERHUB_CREDENTIALS = credentials('github-pat') // G·ªçi credentials r√µ r√†ng
        IMAGE_NAME = 'trungnguyen146/php-website'
        IMAGE_TAG = 'ver1'
        FULL_IMAGE = "trungnguyen146/php-website:ver1"
    }

    triggers {
        pollSCM('H/2 * * * *')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    echo "üîê Logging in to Docker Hub..."
                    sh '''
                        echo "${DOCKERHUB_CREDENTIALS_PSW}" | docker login -u "${DOCKERHUB_CREDENTIALS_USR}" --password-stdin
                    '''
                }
            }
        }

        stage('Setup Buildx') {
            steps {
                sh '''
                    docker buildx create --use --name mybuilder || echo "Builder exists"
                    docker buildx inspect --bootstrap || true
                    docker buildx ls
                '''
            }
        }

        stage('Build and Push Image') {
            steps {
                script {
                    echo "üöß Building and pushing image: ${FULL_IMAGE}"
                    sh """
                        docker buildx build -t ${FULL_IMAGE} -f Dockerfile . --push || {
                            echo "‚ö†Ô∏è buildx failed, falling back to classic build"
                            docker build -t ${FULL_IMAGE} -f Dockerfile .
                            docker push ${FULL_IMAGE}
                        }
                    """
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                script {
                    echo "üöÄ Deploying container..."

                    // Pull image v·ªÅ (ƒë√£ login t·ª´ tr∆∞·ªõc)
                    sh "docker pull ${FULL_IMAGE}"

                    // D·ª´ng v√† g·ª° container c≈©
                    sh '''
                        docker stop php-container || true
                        docker rm php-container || true
                    '''

                    // Ch·∫°y container m·ªõi
                    sh "docker run -d --name php-container -p 8888:80 ${FULL_IMAGE}"
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning up...'
            sh 'docker system prune -f'
        }
        success {
            echo '‚úÖ Deployment successful. Website running on port 8888.'
        }
        failure {
            echo '‚ùå Pipeline failed. Check logs for more info.'
        }
    }
}
