// pipeline {
//     agent any

//     environment {
//         VPS_PRODUCTION_HOST = '14.225.219.14'      // Thay b·∫±ng IP ho·∫∑c hostname VPS c·ªßa b·∫°n
//         SSH_CREDENTIALS_ID = 'Prod_CredID'         // Thay b·∫±ng ID credential SSH key c·ªßa b·∫°n
//         SSH_USERNAME = 'root'                     // Thay b·∫±ng username SSH c·ªßa b·∫°n (n·∫øu c·∫ßn)
//     }

//  stages {
//     stage('Test SSH Connection with Key (Manual)') {
//         steps {
//             script {
//                 def SSH_HOST = "${VPS_PRODUCTION_HOST}"
//                 def SSH_USER = "${env.SSH_USERNAME}" // S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng

//                 withCredentials([sshUserPrivateKey(credentialsId: "${SSH_CREDENTIALS_ID}", keyFileVariable: 'TEMP_SSH_KEY')]) {
//                     sh """
//                         echo "ü©∫ Testing SSH connection to ${SSH_USER}@${SSH_HOST} using SSH key (manual)..."
//                         chmod 400 "\$TEMP_SSH_KEY" // TEMP_SSH_KEY l√† bi·∫øn m√¥i tr∆∞·ªùng do withCredentials cung c·∫•p, n√™n \$TEMP_SSH_KEY l√† ƒë√∫ng
//                         ssh -o StrictHostKeyChecking=no -i "\$TEMP_SSH_KEY" "${SSH_USER}@${SSH_HOST}" -p 22 -o ConnectTimeout=10 'echo Connected successfully'
//                     """
//                 }
//             }
//         }
//     }
// }



pipeline {
    agent {
        docker {
            image 'docker:dind'
            args '--privileged'
        }
    }

    environment {
        DOCKERHUB_USERNAME = 'trungnguyen146'
        IMAGE_NAME = 'trungnguyen146/php-website'
        IMAGE_TAG = 'ver1' // C√¢n nh·∫Øc d√πng tag ƒë·ªông: "ver${env.BUILD_NUMBER}"
        FULL_IMAGE = "${IMAGE_NAME}:${IMAGE_TAG}"
        DOCKERHUB_CREDENTIALS_ID = 'github-pat'

        APPLICATION_PORT = 80

        VPS_PRODUCTION_HOST = '14.225.219.14'
        CONTAINER_NAME_PRODUCTION = 'php-container-prod'
        HOST_PORT_PRODUCTION = 80
        SSH_CREDENTIALS_ID = 'Prod_CredID' // ID c·ªßa Jenkins Credential lo·∫°i "SSH Username with private key"
    }


stage('Test SSH Simple') {
    steps {
        sshagent(['Prod_CredID']) {
            sh "ssh -o StrictHostKeyChecking=no root@${env.VPS_PRODUCTION_HOST} 'echo \"SSH connection successful\"'"
        }
    }
}

//     triggers {
//         pollSCM('H/2 * * * *')
//     }

//     stages {
//         stage('Checkout') {
//             steps {
//                 checkout scm
//             }
//         }

//         stage('Login to Docker Hub') {
//             steps {
//                 withCredentials([usernamePassword(credentialsId: "${env.DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
//                     script {
//                         echo "üîê Logging in to Docker Hub as ${DOCKER_USER}..."
//                         sh """
//                             echo "\${DOCKER_PASS}" | docker login -u "\${DOCKER_USER}" --password-stdin
//                         """
//                     }
//                 }
//             }
//         }

//         stage('Build and Push Image') {
//             steps {
//                 script {
//                     echo "üöß Building and pushing image: ${env.FULL_IMAGE}"
//                     sh """
//                         docker buildx build -t "${env.FULL_IMAGE}" -f Dockerfile . --push || {
//                             echo "‚ö†Ô∏è buildx failed, falling back to classic build"
//                             docker build -t "${env.FULL_IMAGE}" -f Dockerfile .
//                             docker push "${env.FULL_IMAGE}"
//                         }
//                     """
//                 }
//             }
//         }




//     stage('Test SSH Connection with Key (using SSH Steps)') {
//     steps {
//         script {
//             withCredentials([sshUserPrivateKey(
//                 credentialsId: "${env.SSH_CREDENTIALS_ID}",
//                 keyFileVariable: 'sshKeyFile',
//                 usernameVariable: 'sshUser'
//             )]) {
//                 def remote = [
//                     name: "production-vps-test",
//                     host: env.VPS_PRODUCTION_HOST,
//                     user: sshUser,
//                     identityFile: sshKeyFile,
//                     allowAnyHosts: true
//                 ]
//                 echo "ü©∫ ƒêang ki·ªÉm tra k·∫øt n·ªëi SSH t·ªõi ${sshUser}@${env.VPS_PRODUCTION_HOST} ..."
//                 sshCommand remote: remote, command: 'echo "‚úÖ SSH k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn $(hostname)"'
//             }
//         }
//     }
// }

        

//         // stage('Test SSH Connection with Key (using SSH Steps)') { // ƒê√£ c·∫≠p nh·∫≠t t√™n stage cho r√µ r√†ng
//         //     steps {
//         //         script {
//         //             // 1. Kh·ªüi t·∫°o map 'remoteTestConfig'
//         //             def remoteTestConfig = [:]
                    
//         //             // 2. ƒêi·ªÅn th√¥ng tin c∆° b·∫£n
//         //             remoteTestConfig.name = "production-vps-test"      // T√™n m√¥ t·∫£
//         //             remoteTestConfig.host = env.VPS_PRODUCTION_HOST     // IP host t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
//         //             remoteTestConfig.allowAnyHosts = true               // Gi·ªëng v√≠ d·ª• c·ªßa b·∫°n. N·∫øu l·ªói, th·ª≠: knownHosts: 'NONE'
//         //             // remoteTestConfig.port = 22                       // Port m·∫∑c ƒë·ªãnh l√† 22, c√≥ th·ªÉ b·ªè qua
//         //             // remoteTestConfig.options = [ConnectTimeout: '10'] // T√πy ch·ªçn timeout, n·∫øu plugin h·ªó tr·ª£ d·∫°ng n√†y

//         //             // 3. L·∫•y credential v√† ho√†n thi·ªán map
//         //             withCredentials([sshUserPrivateKey(
//         //                 credentialsId: "${env.SSH_CREDENTIALS_ID}",
//         //                 keyFileVariable: 'testKeyFile',          // T√™n bi·∫øn cho file key
//         //                 passphraseVariable: '',                  // ƒê·ªÉ tr·ªëng n·∫øu key kh√¥ng c√≥ passphrase
//         //                 usernameVariable: 'testSshUsername'      // T√™n bi·∫øn cho username
//         //             )]) {
//         //                 remoteTestConfig.user = testSshUsername
//         //                 remoteTestConfig.identityFile = testKeyFile

//         //                 echo "ü©∫ ƒêang ki·ªÉm tra k·∫øt n·ªëi SSH t·ªõi ${remoteTestConfig.user}@${remoteTestConfig.host} b·∫±ng SSH Steps plugin..."
                        
//         //                 // 4. Th·ª±c thi l·ªánh test
//         //                 def testConnectionCommand = 'echo "‚úÖ K·∫øt n·ªëi SSH Steps th√†nh c√¥ng t·ªõi $(hostname) v·ªõi t∆∞ c√°ch $(whoami)! Ng√†y gi·ªù server: $(date)"'
//         //                 sshCommand remote: remoteTestConfig, command: testConnectionCommand
                        
//         //                 echo "‚úÖ Ki·ªÉm tra k·∫øt n·ªëi SSH b·∫±ng SSH Steps th√†nh c√¥ng."
//         //             }
//         //         }
//         //     }
//         // }

//         // stage('Deploy to Production') {
//         //     when {
//         //         expression { return currentBuild.result == null || currentBuild.result == 'SUCCESS' }
//         //     }
//         //     steps {
//         //         input message: "Proceed with deployment of ${env.FULL_IMAGE} to Production?"
                
//         //         // "C√°ch 1" ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ s·ª≠ d·ª•ng SSH Steps plugin
//         //         script {
//         //             // 1. Kh·ªüi t·∫°o map 'remoteDeployConfig'
//         //             def remoteDeployConfig = [:]

//         //             // 2. ƒêi·ªÅn th√¥ng tin c∆° b·∫£n
//         //             remoteDeployConfig.name = "production-vps-deploy"
//         //             remoteDeployConfig.host = env.VPS_PRODUCTION_HOST
//         //             remoteDeployConfig.allowAnyHosts = true // N·∫øu l·ªói, th·ª≠: knownHosts: 'NONE'
//         //             // remoteDeployConfig.port = 22

//         //             // 3. L·∫•y credential v√† ho√†n thi·ªán map
//         //             withCredentials([sshUserPrivateKey(
//         //                 credentialsId: "${env.SSH_CREDENTIALS_ID}",
//         //                 keyFileVariable: 'deployKeyFile',
//         //                 passphraseVariable: '',
//         //                 usernameVariable: 'deploySshUsername'
//         //             )]) {
//         //                 remoteDeployConfig.user = deploySshUsername
//         //                 remoteDeployConfig.identityFile = deployKeyFile

//         //                 echo "üöÄ ƒêang tri·ªÉn khai t·ªõi Production (${remoteDeployConfig.user}@${remoteDeployConfig.host}:${env.HOST_PORT_PRODUCTION}) b·∫±ng SSH Steps plugin..."
                        
//         //                 // 4. Chu·∫©n b·ªã chu·ªói l·ªánh deploy (s·ª≠ d·ª•ng GString ƒë·ªÉ ${env.VAR} ƒë∆∞·ª£c n·ªôi suy b·ªüi Groovy)
//         //                 def deployCommands = """
//         //                     echo 'Pulling image ${env.FULL_IMAGE}...' && \\
//         //                     docker pull '${env.FULL_IMAGE}' && \\
//         //                     echo 'Stopping container ${env.CONTAINER_NAME_PRODUCTION}...' && \\
//         //                     docker stop '${env.CONTAINER_NAME_PRODUCTION}' || true && \\
//         //                     echo 'Removing container ${env.CONTAINER_NAME_PRODUCTION}...' && \\
//         //                     docker rm '${env.CONTAINER_NAME_PRODUCTION}' || true && \\
//         //                     echo 'Running new container ${env.CONTAINER_NAME_PRODUCTION}...' && \\
//         //                     docker run -d --name '${env.CONTAINER_NAME_PRODUCTION}' -p '${env.HOST_PORT_PRODUCTION}:${env.APPLICATION_PORT}' '${env.FULL_IMAGE}' && \\
//         //                     echo '‚úÖ ƒê√£ tri·ªÉn khai l√™n Production'
//         //                 """
                        
//         //                 // 5. Th·ª±c thi l·ªánh deploy
//         //                 sshCommand remote: remoteDeployConfig, command: deployCommands
                        
//         //                 echo "‚úÖ C√°c l·ªánh tri·ªÉn khai ƒë√£ ƒë∆∞·ª£c g·ª≠i qua SSH Steps plugin."
//         //             }
//         //         }

//         //         // "C√°ch 2": S·ª≠ d·ª•ng SSH Agent Plugin (v·∫´n gi·ªØ nguy√™n, ƒëang ƒë∆∞·ª£c comment out)
//         //         /*
//         //         sshagent(credentials: ["${env.SSH_CREDENTIALS_ID}"]) {
//         //             // ... (code cho SSH Agent nh∆∞ tr∆∞·ªõc) ...
//         //         }
//         //         */
//         //     }
//         // }
//     } // K·∫øt th√∫c kh·ªëi stages

//     post {
//         always {
//             echo 'üßπ Cleaning up Docker system on agent...'
//             sh 'docker system prune -af'
//         }
//         success {
//             echo "üéâ Pipeline finished successfully!"
//         }
//         failure {
//             echo "üíî Pipeline failed. Check logs."
//         }
//     }
// } // K·∫øt th√∫c kh·ªëi pipeline

