// pipeline {
//     agent any

//     environment {
//         VPS_PRODUCTION_HOST = '14.225.219.14'      // Thay b·∫±ng IP ho·∫∑c hostname VPS c·ªßa b·∫°n
//         SSH_CREDENTIALS_ID = 'Prod_CredID'         // Thay b·∫±ng ID credential SSH key c·ªßa b·∫°n
//         SSH_USERNAME = 'root'                     // Thay b·∫±ng username SSH c·ªßa b·∫°n (n·∫øu c·∫ßn)
//     }

//  stages {
//     stage('Test SSH Connection with Key (Manual)') {
//         steps {
//             script {
//                 def SSH_HOST = "${VPS_PRODUCTION_HOST}"
//                 def SSH_USER = "${env.SSH_USERNAME}" // S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng

//                 withCredentials([sshUserPrivateKey(credentialsId: "${SSH_CREDENTIALS_ID}", keyFileVariable: 'TEMP_SSH_KEY')]) {
//                     sh """
//                         echo "ü©∫ Testing SSH connection to ${SSH_USER}@${SSH_HOST} using SSH key (manual)..."
//                         chmod 400 "\$TEMP_SSH_KEY" // TEMP_SSH_KEY l√† bi·∫øn m√¥i tr∆∞·ªùng do withCredentials cung c·∫•p, n√™n \$TEMP_SSH_KEY l√† ƒë√∫ng
//                         ssh -o StrictHostKeyChecking=no -i "\$TEMP_SSH_KEY" "${SSH_USER}@${SSH_HOST}" -p 22 -o ConnectTimeout=10 'echo Connected successfully'
//                     """
//                 }
//             }
//         }
//     }
// }



pipeline {
    agent {
        docker {
            image 'docker:dind'
            args '--privileged'
        }
    }

    environment {
        DOCKERHUB_USERNAME = 'trungnguyen146'
        IMAGE_NAME = 'trungnguyen146/php-website'
        IMAGE_TAG = 'ver1'
        FULL_IMAGE = "${IMAGE_NAME}:${IMAGE_TAG}"
        DOCKERHUB_CREDENTIALS_ID = 'github-pat'

        APPLICATION_PORT = 80

        VPS_PRODUCTION_HOST = '14.225.219.14'
        CONTAINER_NAME_PRODUCTION = 'php-container-prod'
        HOST_PORT_PRODUCTION = 80
        SSH_CREDENTIALS_ID = 'Prod_CredID' // ID c·ªßa Jenkins Credential lo·∫°i "SSH Username with private key"
    }

    triggers {
        pollSCM('H/2 * * * *')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${env.DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        echo "üîê Logging in to Docker Hub as ${DOCKER_USER}..."
                        sh """
                            echo "\${DOCKER_PASS}" | docker login -u "\${DOCKER_USER}" --password-stdin
                        """
                    }
                }
            }
        }

        stage('Build and Push Image') {
            steps {
                script {
                    echo "üöß Building and pushing image: ${env.FULL_IMAGE}"
                    sh """
                        docker buildx build -t "${env.FULL_IMAGE}" -f Dockerfile . --push || {
                            echo "‚ö†Ô∏è buildx failed, falling back to classic build"
                            docker build -t "${env.FULL_IMAGE}" -f Dockerfile .
                            docker push "${env.FULL_IMAGE}"
                        }
                    """
                }
            }
        }

        /*
        stage('Test SSH Connection with Key') {
            // ... (ƒë√£ ƒë∆∞·ª£c comment out) ...
        }
        */

        stage('Deploy to Production') {
            when {
                expression { return currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                input message: "Proceed with deployment of ${env.FULL_IMAGE} to Production?"
                
                /* // C√°ch 1: S·ª≠ d·ª•ng sshUserPrivateKey (ƒë√£ ƒë∆∞·ª£c comment out)
                withCredentials([sshUserPrivateKey(credentialsId: "${env.SSH_CREDENTIALS_ID}", keyFileVariable: 'PROD_SSH_KEY', usernameVariable: 'PROD_SSH_USER')]) {
                    // ...
                }
                */

                // C√°ch 2: S·ª≠ d·ª•ng SSH Agent Plugin
                // ƒê·∫£m b·∫£o plugin "SSH Agent" ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t trong Jenkins.
                // ƒê·∫£m b·∫£o credential "${env.SSH_CREDENTIALS_ID}" (Prod_CredID) l√† lo·∫°i "SSH Username with private key"
                // v√† c√≥ username (v√≠ d·ª•: 'root') ƒë∆∞·ª£c ƒëi·ªÅn trong c·∫•u h√¨nh credential ƒë√≥ tr√™n Jenkins.
                sshagent(credentials: ["${env.SSH_CREDENTIALS_ID}"]) {
                    script {
                        // Bi·∫øn usernameVariable 'PROD_SSH_USER_FROM_AGENT' s·∫Ω ch·ª©a username t·ª´ credential.
                        // ƒêi·ªÅu n√†y h·ªØu √≠ch ƒë·ªÉ ƒë·∫£m b·∫£o b·∫°n ƒëang s·ª≠ d·ª•ng ƒë√∫ng username.
                        def sshLoginUser = ''
                        withCredentials([sshUserPrivateKey(credentialsId: "${env.SSH_CREDENTIALS_ID}", usernameVariable: 'PROD_SSH_USER_FROM_AGENT')]) {
                            if (PROD_SSH_USER_FROM_AGENT == null || PROD_SSH_USER_FROM_AGENT.trim().isEmpty()) {
                                echo "Warning: SSH Username is empty in credential '${env.SSH_CREDENTIALS_ID}'. You may need to explicitly set the user in the ssh command (e.g., 'root@host')."
                                // N·∫øu username tr·ªëng, l·ªánh ssh c√≥ th·ªÉ th·∫•t b·∫°i ho·∫∑c d√πng user m·∫∑c ƒë·ªãnh c·ªßa agent.
                                // Trong tr∆∞·ªùng h·ª£p n√†y, b·∫°n n√™n c·∫•u h√¨nh username trong credential tr√™n Jenkins
                                // ho·∫∑c s·ª≠a th√†nh: sshLoginUser = 'root' (n·∫øu 'root' l√† user b·∫°n mu·ªën)
                                error("SSH Username is missing in credential '${env.SSH_CREDENTIALS_ID}'. Please configure it in Jenkins.")
                            }
                            sshLoginUser = PROD_SSH_USER_FROM_AGENT
                        }
                        
                        def sshTarget = "${sshLoginUser}@${env.VPS_PRODUCTION_HOST}"

                        echo "üöÄ Deploying to Production using SSH Agent (${sshTarget}:${env.HOST_PORT_PRODUCTION})..."
                        sh """
                            # L·ªánh ssh b√¢y gi·ªù kh√¥ng c·∫ßn -i keyfile v√¨ SSH agent s·∫Ω cung c·∫•p key.
                            # Username ƒë∆∞·ª£c l·∫•y t·ª´ credential v√† truy·ªÅn v√†o bi·∫øn sshTarget.
                            ssh -o StrictHostKeyChecking=no "${sshTarget}" " \\
                                echo 'Pulling image ${env.FULL_IMAGE}...' && \\
                                docker pull '${env.FULL_IMAGE}' && \\
                                echo 'Stopping container ${env.CONTAINER_NAME_PRODUCTION}...' && \\
                                docker stop '${env.CONTAINER_NAME_PRODUCTION}' || true && \\
                                echo 'Removing container ${env.CONTAINER_NAME_PRODUCTION}...' && \\
                                docker rm '${env.CONTAINER_NAME_PRODUCTION}' || true && \\
                                echo 'Running new container ${env.CONTAINER_NAME_PRODUCTION}...' && \\
                                docker run -d --name '${env.CONTAINER_NAME_PRODUCTION}' -p '${env.HOST_PORT_PRODUCTION}:${env.APPLICATION_PORT}' '${env.FULL_IMAGE}' && \\
                                echo '‚úÖ Deployed to Production' \\
                            "
                        """
                    }
                }
                // K·∫øt th√∫c kh·ªëi SSH Agent
            }
        }
    } // K·∫øt th√∫c stages

    post {
        always {
            echo 'üßπ Cleaning up Docker system on agent...'
            sh 'docker system prune -af'
        }
        success {
            echo "üéâ Pipeline finished successfully!"
        }
        failure {
            echo "üíî Pipeline failed. Check logs."
        }
    }
} // K·∫øt th√∫c kh·ªëi pipeline



