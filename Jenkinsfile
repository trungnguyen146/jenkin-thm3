// pipeline {
//     agent any

//     environment {
//         VPS_PRODUCTION_HOST = '14.225.219.14'      // Thay b·∫±ng IP ho·∫∑c hostname VPS c·ªßa b·∫°n
//         SSH_CREDENTIALS_ID = 'Prod_CredID'         // Thay b·∫±ng ID credential SSH key c·ªßa b·∫°n
//         SSH_USERNAME = 'root'                     // Thay b·∫±ng username SSH c·ªßa b·∫°n (n·∫øu c·∫ßn)
//     }

//  stages {
//     stage('Test SSH Connection with Key (Manual)') {
//         steps {
//             script {
//                 def SSH_HOST = "${VPS_PRODUCTION_HOST}"
//                 def SSH_USER = "${env.SSH_USERNAME}" // S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng

//                 withCredentials([sshUserPrivateKey(credentialsId: "${SSH_CREDENTIALS_ID}", keyFileVariable: 'TEMP_SSH_KEY')]) {
//                     sh """
//                         echo "ü©∫ Testing SSH connection to ${SSH_USER}@${SSH_HOST} using SSH key (manual)..."
//                         chmod 400 "\$TEMP_SSH_KEY" // TEMP_SSH_KEY l√† bi·∫øn m√¥i tr∆∞·ªùng do withCredentials cung c·∫•p, n√™n \$TEMP_SSH_KEY l√† ƒë√∫ng
//                         ssh -o StrictHostKeyChecking=no -i "\$TEMP_SSH_KEY" "${SSH_USER}@${SSH_HOST}" -p 22 -o ConnectTimeout=10 'echo Connected successfully'
//                     """
//                 }
//             }
//         }
//     }
// }



pipeline {
    agent {
        docker {
            image 'docker:dind' // S·ª≠ d·ª•ng Docker-in-Docker
            args '--privileged'  // dind th∆∞·ªùng c·∫ßn --privileged ƒë·ªÉ ch·∫°y daemon Docker ri√™ng b√™n trong container.
                                 // Vi·ªác mount /var/run/docker.sock kh√¥ng c·∫ßn thi·∫øt khi d√πng dind.
        }
    }

    environment {
        DOCKERHUB_USERNAME = 'trungnguyen146' // C√≥ th·ªÉ kh√¥ng c·∫ßn n·∫øu credential ƒë√£ ch·ª©a username
        IMAGE_NAME = 'trungnguyen146/php-website'
        // N√™n s·ª≠ d·ª•ng tag ƒë·ªông ƒë·ªÉ d·ªÖ qu·∫£n l√Ω phi√™n b·∫£n, v√≠ d·ª•:
        // IMAGE_TAG = "ver${env.BUILD_NUMBER}" 
        // ho·∫∑c IMAGE_TAG = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        IMAGE_TAG = 'ver1' // Gi·ªØ l·∫°i tag tƒ©nh c·ªßa b·∫°n, nh∆∞ng c√¢n nh·∫Øc thay ƒë·ªïi
        FULL_IMAGE = "${IMAGE_NAME}:${IMAGE_TAG}"
        // ƒê·∫£m b·∫£o 'github-pat' l√† ID c·ªßa Jenkins Credential lo·∫°i "Username with password" cho Docker Hub
        DOCKERHUB_CREDENTIALS_ID = 'github-pat' 

        // Staging (Local - Same as Jenkins) - Hi·ªán t·∫°i kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c stages b√™n d∆∞·ªõi
        // CONTAINER_NAME_STAGING_LOCAL = 'php-container-staging'
        // HOST_PORT_STAGING_LOCAL = 8800
        APPLICATION_PORT = 80 // Port c·ªßa ·ª©ng d·ª•ng b√™n trong container

        // Production VPS
        VPS_PRODUCTION_HOST = '14.225.219.14'
        CONTAINER_NAME_PRODUCTION = 'php-container-prod'
        HOST_PORT_PRODUCTION = 80 // Port tr√™n VPS ƒë·ªÉ map v·ªõi APPLICATION_PORT
        SSH_CREDENTIALS_ID = 'Prod_CredID' // ID c·ªßa Jenkins Credential lo·∫°i "SSH Username with private key"
    }

    triggers {
        pollSCM('H/2 * * * *') // Ki·ªÉm tra SCM m·ªói 2 ph√∫t
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Login to Docker Hub') {
            steps {
                // S·ª≠ d·ª•ng withCredentials ƒë·ªÉ truy c·∫≠p username v√† password m·ªôt c√°ch an to√†n
                withCredentials([usernamePassword(credentialsId: "${env.DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        echo "üîê Logging in to Docker Hub as ${DOCKER_USER}..."
                        sh """
                            echo "\${DOCKER_PASS}" | docker login -u "\${DOCKER_USER}" --password-stdin
                        """
                    }
                }
            }
        }

        stage('Build and Push Image') {
            steps {
                script {
                    echo "üöß Building and pushing image: ${env.FULL_IMAGE}"
                    sh """
                        docker buildx build -t "${env.FULL_IMAGE}" -f Dockerfile . --push || {
                            echo "‚ö†Ô∏è buildx failed, falling back to classic build"
                            docker build -t "${env.FULL_IMAGE}" -f Dockerfile .
                            docker push "${env.FULL_IMAGE}"
                        }
                    """
                    // S·ª≠ d·ª•ng "${env.FULL_IMAGE}" ƒë·ªÉ Groovy n·ªôi suy bi·∫øn tr∆∞·ªõc khi truy·ªÅn cho shell
                }
            }
        }


        /*
        stage('Test SSH Connection with Key') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: "${env.SSH_CREDENTIALS_ID}", keyFileVariable: 'TEMP_SSH_KEY', usernameVariable: 'SSH_USER')]) {
                        echo "ü©∫ Testing SSH connection to ${SSH_USER}@${env.VPS_PRODUCTION_HOST} using SSH key..."
                        sh """
                            chmod 400 "\$TEMP_SSH_KEY"
                            ssh -o StrictHostKeyChecking=no -i "\$TEMP_SSH_KEY" "${SSH_USER}@${env.VPS_PRODUCTION_HOST}" -p 22 -o ConnectTimeout=10 'echo Connected successfully'
                        """
                    }
                }
            }
        }

        stage('Deploy to Production') {
            when {
                // Ch·ªâ ch·∫°y khi c√°c stage tr∆∞·ªõc th√†nh c√¥ng (result l√† null khi ƒëang ch·∫°y, SUCCESS khi ho√†n th√†nh t·ªët)
                expression { return currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                input message: "Proceed with deployment of ${env.FULL_IMAGE} to Production?"
                
                // C√°ch 1: S·ª≠ d·ª•ng sshUserPrivateKey (nh∆∞ b·∫°n ƒëang l√†m)
                withCredentials([sshUserPrivateKey(credentialsId: "${env.SSH_CREDENTIALS_ID}", keyFileVariable: 'PROD_SSH_KEY', usernameVariable: 'PROD_SSH_USER')]) {
                    script {
                        echo "üöÄ Deploying to Production (${env.VPS_PRODUCTION_HOST}:${env.HOST_PORT_PRODUCTION})..."
                        // C√°c bi·∫øn Jenkins (env.FULL_IMAGE, env.CONTAINER_NAME_PRODUCTION, ...) c·∫ßn ƒë∆∞·ª£c Groovy n·ªôi suy
                        // v√†o chu·ªói l·ªánh s·∫Ω ƒë∆∞·ª£c th·ª±c thi tr√™n server t·ª´ xa.
                        sh """
                            ssh -o StrictHostKeyChecking=no -i "\$PROD_SSH_KEY" "${PROD_SSH_USER}@${env.VPS_PRODUCTION_HOST}" " \\
                                echo 'Pulling image ${env.FULL_IMAGE}...' && \\
                                docker pull '${env.FULL_IMAGE}' && \\
                                echo 'Stopping container ${env.CONTAINER_NAME_PRODUCTION}...' && \\
                                docker stop '${env.CONTAINER_NAME_PRODUCTION}' || true && \\
                                echo 'Removing container ${env.CONTAINER_NAME_PRODUCTION}...' && \\
                                docker rm '${env.CONTAINER_NAME_PRODUCTION}' || true && \\
                                echo 'Running new container ${env.CONTAINER_NAME_PRODUCTION}...' && \\
                                docker run -d --name '${env.CONTAINER_NAME_PRODUCTION}' -p '${env.HOST_PORT_PRODUCTION}:${env.APPLICATION_PORT}' '${env.FULL_IMAGE}' && \\
                                echo '‚úÖ Deployed to Production' \\
                            "
                        """
                        // L∆∞u √Ω: C√°c l·ªánh docker tr√™n ƒë∆∞·ª£c n·ªëi v·ªõi nhau b·∫±ng && ƒë·ªÉ ƒë·∫£m b·∫£o d·ª´ng l·∫°i n·∫øu c√≥ l·ªói (tr·ª´ stop/rm d√πng || true).
                        // D·∫•u \ ·ªü cu·ªëi d√≤ng ƒë·ªÉ n·ªëi chu·ªói l·ªánh d√†i cho d·ªÖ ƒë·ªçc trong Groovy.
                    }
                }
             */ // K·∫øt th√∫c kh·ªëi SSH key 

                // C√°ch 2: S·ª≠ d·ª•ng SSH Agent Plugin (c√°ch k·∫øt n·ªëi "m·ªõi" v√† th∆∞·ªùng ƒë∆∞·ª£c khuy·∫øn ngh·ªã h∆°n cho nhi·ªÅu l·ªánh SSH)
                // B·∫°n c·∫ßn c√†i ƒë·∫∑t plugin "SSH Agent" trong Jenkins.

                   // b·∫Øt ƒë·∫ßu kh·ªëi SSH Agent Plugin
                sshagent(credentials: ["${env.SSH_CREDENTIALS_ID}"]) { // Truy·ªÅn ID c·ªßa SSH credential
                    script {
                        def sshUser = '' // L·∫•y username t·ª´ credential n·∫øu c√≥, ho·∫∑c ƒë·ªãnh nghƒ©a ·ªü ƒë√¢y/env
                        // N·∫øu credential 'Prod_CredID' c·ªßa b·∫°n l√† "SSH Username with private key" v√† ƒë√£ c√≥ username (vd: 'root')
                        // th√¨ sshagent s·∫Ω t·ª± ƒë·ªông s·ª≠ d·ª•ng username ƒë√≥.
                        // N·∫øu kh√¥ng, b·∫°n c·∫ßn l·∫•y username:
                        // withCredentials([sshUserPrivateKey(credentialsId: "${env.SSH_CREDENTIALS_ID}", usernameVariable: 'PROD_SSH_USER_AGENT')]) {
                        //    sshUser = PROD_SSH_USER_AGENT
                        // }
                        // Gi·∫£ s·ª≠ username l√† 'root' ho·∫∑c ƒë√£ c√≥ trong credential
                        // def sshTarget = "root@${env.VPS_PRODUCTION_HOST}" // Thay 'root' n·∫øu c·∫ßn

                        // L·∫•y username t·ª´ credential m·ªôt c√°ch an to√†n
                        def sshTarget = ''
                        withCredentials([sshUserPrivateKey(credentialsId: "${env.SSH_CREDENTIALS_ID}", usernameVariable: 'PROD_SSH_USER_AGENT')]) {
                           sshTarget = "${PROD_SSH_USER_AGENT}@${env.VPS_PRODUCTION_HOST}"
                        }

                        echo "üöÄ Deploying to Production using SSH Agent (${sshTarget}:${env.HOST_PORT_PRODUCTION})..."
                        sh """
                            ssh -o StrictHostKeyChecking=no "${sshTarget}" " \\
                                echo 'Pulling image ${env.FULL_IMAGE}...' && \\
                                docker pull '${env.FULL_IMAGE}' && \\
                                echo 'Stopping container ${env.CONTAINER_NAME_PRODUCTION}...' && \\
                                docker stop '${env.CONTAINER_NAME_PRODUCTION}' || true && \\
                                echo 'Removing container ${env.CONTAINER_NAME_PRODUCTION}...' && \\
                                docker rm '${env.CONTAINER_NAME_PRODUCTION}' || true && \\
                                echo 'Running new container ${env.CONTAINER_NAME_PRODUCTION}...' && \\
                                docker run -d --name '${env.CONTAINER_NAME_PRODUCTION}' -p '${env.HOST_PORT_PRODUCTION}:${env.APPLICATION_PORT}' '${env.FULL_IMAGE}' && \\
                                echo '‚úÖ Deployed to Production' \\
                            "
                        """
                    }
                }
                 // K·∫øt th√∫c kh·ªëi SSH Agent 
            }
        }
    } // K·∫øt th√∫c kh·ªëi stages ch√≠nh

    post {
        always {
            echo 'üßπ Cleaning up Docker system on agent...'
            sh 'docker system prune -af' // -a ƒë·ªÉ x√≥a c·∫£ images kh√¥ng d√πng, -f ƒë·ªÉ kh√¥ng h·ªèi confirm
        }
        success {
            echo "üéâ Pipeline finished successfully!"
        }
        failure {
            echo "üíî Pipeline failed. Check logs."
        }
    }
} // K·∫øt th√∫c kh·ªëi pipeline




